------------------------------------------------------------------------------
-- @name: VGA Display Module 800 * 600 @75Hz (50MHz)
-- @description: Fetch data from SDRAM using Qsys SDRAM IP in certain address,
--               and then cast them on the screen through VGA Display Module
--               that we write.
------------------------------------------------------------------------------
-- The standard we are using: 
-- Clock frequencies   : 50MHz
-- Horizonal timing information
--    sync pluse       : 128
--    back porch       : 88
--    active           : 800
--    front porch      : 40
--    all lines        : 1056
-- Vertical timing information
--    sync pluse       : 4
--    back porch       : 23
--    active           : 600
--    front porch      : 1
--    all lines        : 628
------------------------------------------------------------------------------


library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity vga_out is
   port (
      clk          : in std_logic;
      rst          : in std_logic;

      vga_rgb      : out std_logic_vector (7 downto 0); -- R2, R1, R0, G2, G1, G0, B1, B0
		vga_vsync    : out std_logic;
      vga_hsync    : out std_logic
   );
end entity;

architecture behave of vga_out is
   signal vga_hsync_cnt    : std_logic_vector (15 downto 0);
   signal vga_vsync_cnt    : std_logic_vector (15 downto 0);
   signal vga_hsync_cnt_n  : std_logic_vector (15 downto 0);
   signal vga_vsync_cnt_n  : std_logic_vector (15 downto 0);
   
   signal vga_vsync_n  : std_logic;
   signal vga_hsync_n  : std_logic;
   signal vga_rgb_n    : std_logic_vector (7 downto 0);
begin

-- 时序电路,用来给hsync_cnt,vsync_cnt,vga_vsync,vga_hsync,vga_rgb寄存器赋值
reset: process(clk, rst)
begin
   if rst = '0'
      vga_rgb <= "00000000";
      vga_hsync <= '0';
      vga_vsync <= '0';
	  vga_hsync_cnt <= "0000000000000000";
	  vga_vsync_cnt <= "0000000000000000";
   else
	  vga_rgb <= vga_rgb_n;
	  vga_hsync <= vga_hsync_n;
	  vga_vsync <= vga_vsync_n;
	  vga_hsync_cnt <= vga_hsync_cnt_n;
	  vga_vsync_cnt <= vga_vsync_cnt_n;
   end if;
end process;

-- 组合电路,水平扫描
horizonal: process(clk)
begin
    if(vga_hsync_cnt = 1056) then			--判断水平扫描时序    80+160+800+16 = 1056
		vga_hsync_cnt_n <= "0000000000000000";	--如果水平扫描完毕,计数器将会被清零
	else
		vga_hsync_cnt_n <= vga_hsync_cnt + 1;		--如果水平没有扫描完毕,计数器继续累加
	end if;
end process;


-- 组合电路,垂直扫描
vertical: process(clk)
begin
	if((vga_vsync_cnt = 625) and (vga_hsync_cnt = 1056)) then --判断垂直扫描时序 3+21+600+1=625
		vga_vsync_cnt_n <= "0000000000000000";					--如果垂直扫描完毕,计数器将会被清零
	else if(vga_hsync_cnt = 1056)	then	--判断水平扫描时序
		vga_vsync_cnt_n <= vga_vsync_cnt + 1;	--如果水平扫描完毕,计数器继续累加
	else
		vga_vsync_cnt_n <= vga_vsync_cnt;			--否则,计数器将保持不变
	end if;
end process;

--组合电路，将HSYNC_A区域置0,HSYNC_B+HSYNC_C+HSYNC_D置1
process(clk)
begin
	if(hsync_cnt < 80)	then			--判断水平扫描时序
		HSYNC_N = '0';						--如果在HSYNC_A区域,那么置0
	else
		HSYNC_N = '1';						--如果不在HSYNC_A区域,那么置1
	end if;
end process;

--组合电路，将VSYNC_A区域置0,VSYNC_P+VSYNC_Q+VSYNC_R置1
process(clk)
begin
	if(vsync_cnt < 3)	then			--判断水平扫描时序
		VSYNC_N = '0';						--如果在VSYNC_O区域,那么置0
	else
		VSYNC_N = '1';						--如果不在VSYNC_O区域,那么置1
	end if;
end process;

--组合电路,用于显示图案
process(clk)
begin
	if hsync_cnt > 240 and hsync_cnt < 1041 then   --80+160=240 and 80+160+800=1040
		
	else
		vga_rgb_n <= "00000000";
	end if
end process;

end architecture;